////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                //
//   _)  |  |            _)                 This software may be modified and distributed         //
//    |  |  |  |  | (_-<  |   _ \    \      under the terms of the MIT license.                   //
//   _| _| _| \_,_| ___/ _| \___/ _| _|     See the LICENSE file for details.                     //
//                                                                                                //
//  Authors: Simon Schneegans (code@simonschneegans.de)                                           //
//                                                                                                //
////////////////////////////////////////////////////////////////////////////////////////////////////

#version 450

// inputs ------------------------------------------------------------------------------------------
layout (local_size_x = 16, local_size_y = 16) in;

// outputs -----------------------------------------------------------------------------------------
layout (rgba32f, binding = 0) writeonly uniform image2D outputImage;

// constants ---------------------------------------------------------------------------------------
#define PI 3.14159265359

// methods -----------------------------------------------------------------------------------------

// Brian Karis s2013_pbs_epic_notes_v2.pdf
vec3 ImportanceSampleGGX( vec2 Xi, float Roughness, vec3 N)
{
  //float a = pow(Roughness + 1, 2);
  float a = Roughness * Roughness;
  
  float Phi = 2 * PI * Xi.x;
  float CosTheta = sqrt( (1.0 - Xi.y) / ( 1.0 + (a*a - 1.0) * Xi.y ) );
  float SinTheta = sqrt( 1.0 - CosTheta * CosTheta );
  
  vec3 H = vec3(SinTheta * cos( Phi ), SinTheta * sin( Phi ), CosTheta);
  vec3 up = abs(N.z) < 0.999 ? vec3(0,0,1) : vec3(1,0,0);

  vec3 TangentX = normalize( cross( up, N ) );
  vec3 TangentY = cross( N, TangentX );
  
  // Tangent to world space
  return normalize(TangentX * H.x + TangentY * H.y + N * H.z);
}

// http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
float radicalInverse_VdC(uint bits) 
{
  bits = (bits << 16u) | (bits >> 16u);
  bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
  bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
  bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
  bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
  
  return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 Hammersley(uint i, uint n)
{ 
  return vec2(float(i)/float(n), radicalInverse_VdC(i));
}

// http://graphicrants.blogspot.com.au/2013/08/specular-brdf-reference.html
float GGX(float nDotV, float a) {
  // lipsryme, http://www.gamedev.net/topic/658769-ue4-ibl-glsl/
  // http://graphicrants.blogspot.com.au/2013/08/specular-brdf-reference.html
  float k = a / 2.0;
  return nDotV / (nDotV * (1.0 - k) + k);
} 

float G_Smith(float Roughness, float nDotV, float nDotL) {
  // lipsryme, http://www.gamedev.net/topic/658769-ue4-ibl-glsl/ 
  float a = Roughness * Roughness;
  return GGX(nDotL, a) * GGX(nDotV, a);
}

vec2 IntegrateBRDF( float Roughness, float NoV , vec3 N) {
    vec3 V = vec3( sqrt ( 1.0 - NoV * NoV ) //sin
                 , 0.0
                 , NoV); // cos
    float A = 0.0;
    float B = 0.0;
    const uint NumSamples = 1024u;
    for ( uint i = 0u; i < NumSamples; i++ ) {
        vec2 Xi = Hammersley( i, NumSamples );
        vec3 H = ImportanceSampleGGX( Xi, Roughness, N );
        vec3 L = 2.0 * dot(V, H) * H - V;
        float NoL = clamp((L.z), 0, 1);
        float NoH = clamp((H.z), 0, 1);
        float VoH = clamp((dot(V, H)), 0, 1);
        if ( NoL > 0.0 ) {
            float G = G_Smith(Roughness, NoV, NoL);
            float G_Vis = G * VoH / (NoH * NoV);
            float Fc = pow(1.0 - VoH, 5.0);
            A += (1.0 - Fc) * G_Vis;
            B += Fc * G_Vis;
        }
    }
    return vec2(A, B) / float(NumSamples);
}

void main()
{
  ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
  ivec2 size = imageSize(outputImage);

  if (storePos.x >= size.x || storePos.y >= size.y) {
      return;
  }

  vec2 fragCoord = vec2(storePos) + vec2(0.5);
  vec2 resolution = vec2(size);
  vec2 uv = fragCoord / resolution;

  vec3 N = vec3(0,0,1); 
  float NdotV = uv.x;
  float Roughness = uv.y;

  vec2 result = IntegrateBRDF(Roughness, NdotV, N);

  imageStore(outputImage, storePos, vec4(result, 0.0, 0.0) );
}
